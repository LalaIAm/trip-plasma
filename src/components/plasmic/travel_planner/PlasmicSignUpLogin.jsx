// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q81HoHETamUnN6docDuBYG
// Component: ValCC7FDbx
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: 5hjPTTFEdUE/component
import Button from "../../Button"; // plasmic-import: WNfjecg9kIP/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_travel_planner.module.css"; // plasmic-import: q81HoHETamUnN6docDuBYG/projectcss
import sty from "./PlasmicSignUpLogin.module.css"; // plasmic-import: ValCC7FDbx/css

export const PlasmicSignUpLogin__VariantProps = new Array();

export const PlasmicSignUpLogin__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicSignUpLogin__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "nameInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "emailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "passwordInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx]
  );

  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__expr2)}>
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              <React.Fragment>{""}</React.Fragment>
              {
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {"Let's Hit the Road"}
                </h2>
              }

              <React.Fragment>{""}</React.Fragment>
            </React.Fragment>
          </div>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__fSbTa)}
          >
            <TextInput
              data-plasmic-name={"nameInput"}
              data-plasmic-override={overrides.nameInput}
              className={classNames("__wab_instance", sty.nameInput)}
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["nameInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              value={p.generateStateValueProp($state, ["nameInput", "value"])}
            />

            <TextInput
              data-plasmic-name={"emailInput"}
              data-plasmic-override={overrides.emailInput}
              className={classNames("__wab_instance", sty.emailInput)}
              name={"email"}
              onChange={(...eventArgs) => {
                p.generateStateOnChangeProp($state, ["emailInput", "value"])(
                  (e => e.target?.value).apply(null, eventArgs)
                );
              }}
              placeholder={"You@Email.com"}
              required={true}
              value={p.generateStateValueProp($state, ["emailInput", "value"])}
            />

            <TextInput
              data-plasmic-name={"passwordInput"}
              data-plasmic-override={overrides.passwordInput}
              className={classNames("__wab_instance", sty.passwordInput)}
              name={"password"}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  p.generateStateOnChangeProp($state, [
                    "passwordInput",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};
                  $steps["setPasswordInputValue"] = true
                    ? (() => {
                        const actionArgs = {
                          variable: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "GKuuKDDrF",
                              componentUuid: "ValCC7FDbx",
                              argName: "variable"
                            },
                            () => ({
                              objRoot: $state,
                              variablePath: ["passwordInput", "value"]
                            })
                          ),

                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "GKuuKDDrF",
                              componentUuid: "ValCC7FDbx",
                              argName: "operation"
                            },
                            () => 0
                          ),

                          value: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariable",
                              interactionUuid: "GKuuKDDrF",
                              componentUuid: "ValCC7FDbx",
                              argName: "value"
                            },
                            () => $state.passwordInput.value
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariable",
                            interactionUuid: "GKuuKDDrF",
                            componentUuid: "ValCC7FDbx"
                          },
                          () =>
                            (({ variable, value, startIndex, deleteCount }) => {
                              const { objRoot, variablePath } = variable;
                              p.set(objRoot, variablePath, value);
                              return value;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["setPasswordInputValue"] === "object" &&
                    typeof $steps["setPasswordInputValue"].then === "function"
                  ) {
                    $steps["setPasswordInputValue"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariable",
                        interactionUuid: "GKuuKDDrF",
                        componentUuid: "ValCC7FDbx"
                      },
                      $steps["setPasswordInputValue"]
                    );
                  }
                })?.apply(null, eventArgs);
              }}
              placeholder={"Your Password"}
              required={true}
              value={p.generateStateValueProp($state, [
                "passwordInput",
                "value"
              ])}
            />

            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button)}
              link={`/dashboard`}
              onClick={async event => {
                const $steps = {};
                $steps["createUser"] = true
                  ? (() => {
                      const actionArgs = {};
                      return __wrapUserFunction(
                        {
                          type: "InteractionLoc",
                          actionName: "customFunction",
                          interactionUuid: "Bcpgen0Z9",
                          componentUuid: "ValCC7FDbx"
                        },
                        () =>
                          (({ customFunction }) => {
                            return customFunction();
                          })?.apply(null, [actionArgs]),
                        actionArgs
                      );
                    })()
                  : undefined;
                if (
                  typeof $steps["createUser"] === "object" &&
                  typeof $steps["createUser"].then === "function"
                ) {
                  $steps["createUser"] = await __wrapUserPromise(
                    {
                      type: "InteractionLoc",
                      actionName: "customFunction",
                      interactionUuid: "Bcpgen0Z9",
                      componentUuid: "ValCC7FDbx"
                    },
                    $steps["createUser"]
                  );
                }
              }}
            >
              {"Sign Up"}
            </Button>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "text",
    "h2",
    "nameInput",
    "emailInput",
    "passwordInput",
    "button"
  ],

  text: ["text", "h2"],
  h2: ["h2"],
  nameInput: ["nameInput"],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  button: ["button"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSignUpLogin__ArgProps,
          internalVariantPropNames: PlasmicSignUpLogin__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSignUpLogin__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUpLogin";
  } else {
    func.displayName = `PlasmicSignUpLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUpLogin = Object.assign(
  // Top-level PlasmicSignUpLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    h2: makeNodeComponent("h2"),
    nameInput: makeNodeComponent("nameInput"),
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    button: makeNodeComponent("button"),
    // Metadata about props expected for PlasmicSignUpLogin
    internalVariantProps: PlasmicSignUpLogin__VariantProps,
    internalArgProps: PlasmicSignUpLogin__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignUpLogin;
/* prettier-ignore-end */
