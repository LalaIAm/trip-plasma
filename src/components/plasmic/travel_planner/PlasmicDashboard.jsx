// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: q81HoHETamUnN6docDuBYG
// Component: XbrVA9Q5vk
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { CmsQueryRepeater } from "@plasmicpkgs/plasmic-cms"; // plasmic-import: 8N9-WfZSaq/codeComponent
import NavLink from "../../NavLink"; // plasmic-import: EEmwoCi7Bj/component
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_travel_planner.module.css"; // plasmic-import: q81HoHETamUnN6docDuBYG/projectcss
import sty from "./PlasmicDashboard.module.css"; // plasmic-import: XbrVA9Q5vk/css
import CarRoofBoxSvgrepoComsvgIcon from "./icons/PlasmicIcon__CarRoofBoxSvgrepoComsvg"; // plasmic-import: m-gXbb4aUr/icon

export const PlasmicDashboard__VariantProps = new Array();

export const PlasmicDashboard__ArgProps = new Array("user", "icon");

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicDashboard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          user: true
        },
        props.args
      ),

    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            hasGap={true}
            className={classNames(projectcss.all, sty.header)}
          >
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div
                data-plasmic-name={"column"}
                data-plasmic-override={overrides.column}
                className={classNames(projectcss.all, sty.column)}
              >
                {(
                  (() => {
                    try {
                      return $props.user;
                    } catch (e) {
                      if (e instanceof TypeError) {
                        return [];
                      }
                      throw e;
                    }
                  })() ?? []
                ).map((currentItem, currentIndex) => (
                  <CmsQueryRepeater
                    data-plasmic-name={"cmsDataFetcher"}
                    data-plasmic-override={overrides.cmsDataFetcher}
                    className={classNames("__wab_instance", sty.cmsDataFetcher)}
                    desc={false}
                    emptyMessage={null}
                    forceEmptyState={false}
                    forceLoadingState={false}
                    key={currentIndex}
                    limit={1}
                    loadingMessage={null}
                    noAutoRepeat={true}
                    noLayout={false}
                    table={"users"}
                    useDraft={false}
                  >
                    <ph.DataCtxReader>
                      {$ctx => (
                        <div
                          data-plasmic-name={"text"}
                          data-plasmic-override={overrides.text}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text
                          )}
                        >
                          {(() => {
                            try {
                              return $ctx.plasmicCmsUsersCollection[0]
                                .identifier;
                            } catch (e) {
                              if (e instanceof TypeError) {
                                return "Enter some text";
                              }
                              throw e;
                            }
                          })()}
                        </div>
                      )}
                    </ph.DataCtxReader>
                  </CmsQueryRepeater>
                ))}
              </div>
            </div>
          </p.Stack>
          <div className={classNames(projectcss.all, sty.freeBox__zd5AS)}>
            <div className={classNames(projectcss.all, sty.freeBox__tAC8)}>
              <NavLink
                data-plasmic-name={"navLink"}
                data-plasmic-override={overrides.navLink}
                className={classNames("__wab_instance", sty.navLink)}
                icon={p.renderPlasmicSlot({
                  defaultContents: (
                    <CarRoofBoxSvgrepoComsvgIcon
                      className={classNames(projectcss.all, sty.svg__oRxHj)}
                      role={"img"}
                    />
                  ),

                  value: args.icon
                })}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "columns",
    "column",
    "cmsDataFetcher",
    "text",
    "navLink"
  ],

  header: ["header", "columns", "column", "cmsDataFetcher", "text"],
  columns: ["columns", "column", "cmsDataFetcher", "text"],
  column: ["column", "cmsDataFetcher", "text"],
  cmsDataFetcher: ["cmsDataFetcher", "text"],
  text: ["text"],
  navLink: ["navLink"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDashboard__ArgProps,
          internalVariantPropNames: PlasmicDashboard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboard";
  } else {
    func.displayName = `PlasmicDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboard = Object.assign(
  // Top-level PlasmicDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    cmsDataFetcher: makeNodeComponent("cmsDataFetcher"),
    text: makeNodeComponent("text"),
    navLink: makeNodeComponent("navLink"),
    // Metadata about props expected for PlasmicDashboard
    internalVariantProps: PlasmicDashboard__VariantProps,
    internalArgProps: PlasmicDashboard__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDashboard;
/* prettier-ignore-end */
